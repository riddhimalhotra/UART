//TITLE: RX LOGIC DESIGN 16650A
//DEVELOPED BY: AASHI SRIVASTAVA
//DATE-14.01.24
//-----------------------------------------------------------------------


module rx_logic (input clk,rst,rx,sticky_parity,eps,pen,baud_pulse, input [1:0] wls,output reg push,output reg pe,fe,bi);
  
  reg rx_reg;
  reg [7:0] dout;
  wire fall_edge;
  reg [3:0]count=0;
  reg [2:0]bitcnt=0;
  reg pe_reg;
  
  always @(posedge clk or posedge rst)
    begin
      rx_reg<=rx;
    end
  
  assign fall_edge=rx_reg;
  
  enum logic [2:0] {idle=3'b000, start=3'b001, read=3'b010, parity=3'b011, stop=3'b100} state;
  
  always @(posedge clk or posedge rst)
    begin
      if (rst)
        begin
          pe=0;
          bi=0;
          fe=0;
          dout=0;
          state=idle;
          push=0;
          bitcnt=0;
        end
      else
        begin
          push=0;
          if(baud_pulse)
            begin
              case(state)
                idle:
                  begin
                  	if(!fall_edge)
                    	begin
                      	state<=start;
                      	count<=5'd15;
                    	end
                    else
                      begin
                        state<=idle;
                      end
                  end
                
                start:
                  begin
                    count=count-1;
                    if(count==5'd7)
                      begin
                        if(rx==1'b1)
                          begin
                            state<=idle;
                            count<=5'd15;
                          end
                        else
                          state<=start;
                      end
                    
                    else if(count==5'b0)
                      begin
                        state<=read;
                        bitcnt<={1'b1,wls};
                        count<=5'd15;
                      end
                  end
                
               read: begin
    count <= count - 1;

    if (count == 5'd7)
    begin
        case (wls)
            2'b00: dout <= {3'b000, rx, dout[4:1]};
            2'b01: dout <= {2'b00, rx, dout[5:1]};
            2'b10: dout <= {1'b0, rx, dout[6:1]};
            2'b11: dout <= {rx, dout[7:1]};
        endcase

        state <= read;
    end
    else if (count == 0)
    begin
        if (bitcnt == 0)
        begin
            case ({sticky_parity, eps})
                2'b00: pe_reg <= ~^{rx, dout}; // Odd parity -> pe: no. of 1's odd
                2'b01: pe_reg <= ^{rx, dout};  // Even parity
                2'b10: pe_reg <= ~rx;          // Parity should be 1
                2'b11: pe_reg <= rx;           // Parity should be 0
            endcase

            if (pen == 1'b1)
            begin
                state <= parity;
                count <= 5'd15;
            end
            else
            begin
                state <= stop;
                count <= 5'd15;
            end
        end // bitcnt reaches 0
        else
        begin
            bitcnt <= bitcnt - 1;
            state <= read;
            count <= 5'd15;
        end // send rest of bits
    end
end

                
                parity:
                  begin
                    count=count-1;
                    if(count==5'd7)
                      begin
                        pe<=pe_reg;
                        state<=parity;
                      end
                    else if(count==0)
                      begin
                        state<=stop;
                        count<=5'd15;
                      end
                  end
                
                stop:
                  begin
                    count=count-1;
                    if(count==5'd7)
                      begin
                        fe<=~rx;
                        push<=1;
                        state<=stop;
                      end
                    else if(count==0)
                      begin
                        state<=idle;
                        count<=5'd15;
                      end
                  end
              endcase
            end
        end
    end
endmodule
                        
                        
                              
                
  